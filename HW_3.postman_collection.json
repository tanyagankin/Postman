{
	"info": {
		"_postman_id": "a1769381-e929-47c7-9073-5ee5531b3579",
		"name": "HW_3",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "26682973"
	},
	"item": [
		{
			"name": "ER_1/Login",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1) необходимо залогиниться\r",
							"// POST\r",
							"// http://162.55.220.72:5005/login\r",
							"// login : str (кроме /)\r",
							"// password : str\r",
							"\r",
							"// Приходящий токен необходимо передать во все остальные запросы.\r",
							"// ===================\r",
							"// дальше все запросы требуют наличие токена.\r",
							"// ===================\r",
							"\r",
							"let resp = pm.response.json();\r",
							"let resp_token = resp.token;\r",
							"pm.environment.set(\"token\",resp_token);//авторизация\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "12345",
							"type": "string"
						},
						{
							"key": "username",
							"value": "Tanya",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"url": {
					"raw": "{{url}}/login",
					"host": [
						"{{url}}"
					],
					"path": [
						"login"
					]
				}
			},
			"response": []
		},
		{
			"name": "ER_2/user_info",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 2) http://162.55.220.72:5005/user_info\r",
							"// req. (RAW JSON)\r",
							"// POST\r",
							"// age: int\r",
							"// salary: int\r",
							"// name: str\r",
							"// auth_token\r",
							"\r",
							"\r",
							"// resp.\r",
							"// {'start_qa_salary':salary,\r",
							"//  'qa_salary_after_6_months': salary * 2,\r",
							"//  'qa_salary_after_12_months': salary * 2.9,\r",
							"//  'person': {'u_name':[user_name, salary, age],\r",
							"//                                 'u_age':age,\r",
							"//                                 'u_salary_1.5_year': salary * 4}\r",
							"//                                 }\r",
							"\r",
							"// Тесты:\r",
							"// 1) Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"// \"var resp = pm.response.json();\\r\",\r",
							"//  \"var req_raw_json = JSON.parse(pm.request.body.raw);\\r\",\r",
							"//  \"var req_salary = req_raw_json.salary;\\r\",\r",
							"//  \"var req_name = req_raw_json.name;\\r\",\r",
							"//  \"var req_age = req_raw_json.age;\\r\",\r",
							"//  \"console.log (req_salary,req_name,req_age)\\r\"\r",
							"// 2) Проверка структуры json в ответ.\r",
							"var resp = pm.response.json();\r",
							"\r",
							"const schema ={\r",
							"     \"type\": \"object\",\r",
							"    \"default\": {},\r",
							"    \"title\": \"Root Schema\",\r",
							"    \"required\": [\r",
							"        \"person\",\r",
							"        \"qa_salary_after_12_months\",\r",
							"        \"qa_salary_after_6_months\",\r",
							"        \"start_qa_salary\"\r",
							"    ],\r",
							"    \"properties\": {\r",
							"        \"person\": {\r",
							"            \"type\": \"object\",\r",
							"            \"default\": {},\r",
							"            \"title\": \"The person Schema\",\r",
							"            \"required\": [\r",
							"                \"u_age\",\r",
							"                \"u_name\",\r",
							"                \"u_salary_1_5_year\"\r",
							"            ],\r",
							"            \"properties\": {\r",
							"                \"u_age\": {\r",
							"                    \"type\": \"integer\",\r",
							"                    \"default\": 0,\r",
							"                    \"title\": \"The u_age Schema\",\r",
							"                    \"examples\": [\r",
							"                        40\r",
							"                    ]\r",
							"                },\r",
							"                \"u_name\": {\r",
							"                    \"type\": \"array\",\r",
							"                    \"default\": [],\r",
							"                    \"title\": \"The u_name Schema\",\r",
							"                    \"items\": {\r",
							"                        \"anyOf\": [{\r",
							"                            \"type\": \"string\",\r",
							"                            \"default\": \"\",\r",
							"                            \"title\": \"A Schema\",\r",
							"                            \"examples\": [\r",
							"                                \"Tatyana\"\r",
							"                            ]\r",
							"                        },\r",
							"                        {\r",
							"                            \"type\": \"integer\",\r",
							"                            \"title\": \"A Schema\",\r",
							"                            \"examples\": [\r",
							"                                10000,\r",
							"                                40\r",
							"                            ]\r",
							"                        }]\r",
							"                    },\r",
							"                    \"examples\": [\r",
							"                        [\"Tatyana\",\r",
							"                            10000,\r",
							"                            40\r",
							"                        ]\r",
							"                    ]\r",
							"                },\r",
							"                \"u_salary_1_5_year\": {\r",
							"                    \"type\": \"integer\",\r",
							"                    \"default\": 0,\r",
							"                    \"title\": \"The u_salary_1_5_year Schema\",\r",
							"                    \"examples\": [\r",
							"                        40000\r",
							"                    ]\r",
							"                }\r",
							"            },\r",
							"            \"examples\": [{\r",
							"                \"u_age\": 40,\r",
							"                \"u_name\": [\r",
							"                    \"Tatyana\",\r",
							"                    10000,\r",
							"                    40\r",
							"                ],\r",
							"                \"u_salary_1_5_year\": 40000\r",
							"            }]\r",
							"        },\r",
							"        \"qa_salary_after_12_months\": {\r",
							"            \"type\": \"number\",\r",
							"            \"default\": 0.0,\r",
							"            \"title\": \"The qa_salary_after_12_months Schema\",\r",
							"            \"examples\": [\r",
							"                29000.0\r",
							"            ]\r",
							"        },\r",
							"        \"qa_salary_after_6_months\": {\r",
							"            \"type\": \"integer\",\r",
							"            \"default\": 0,\r",
							"            \"title\": \"The qa_salary_after_6_months Schema\",\r",
							"            \"examples\": [\r",
							"                20000\r",
							"            ]\r",
							"        },\r",
							"        \"start_qa_salary\": {\r",
							"            \"type\": \"integer\",\r",
							"            \"default\": 0,\r",
							"            \"title\": \"The start_qa_salary Schema\",\r",
							"            \"examples\": [\r",
							"                10000\r",
							"            ]\r",
							"        }\r",
							"    },\r",
							"    \"examples\": [{\r",
							"        \"person\": {\r",
							"            \"u_age\": 40,\r",
							"            \"u_name\": [\r",
							"                \"Tatyana\",\r",
							"                10000,\r",
							"                40\r",
							"            ],\r",
							"            \"u_salary_1_5_year\": 40000\r",
							"        },\r",
							"        \"qa_salary_after_12_months\": 29000.0,\r",
							"        \"qa_salary_after_6_months\": 20000,\r",
							"        \"start_qa_salary\": 10000\r",
							"    }]\r",
							"};\r",
							"pm.test(`Schema is valid`,function(){\r",
							"   pm.response.to.have.jsonSchema(schema); \r",
							"});\r",
							"\r",
							"// 3) В ответе указаны коэффициенты умножения salary, напишите тесты по проверке правильности результата перемножения на коэффициент.\r",
							"\r",
							" var resp_qa_salary_x2 = resp.qa_salary_after_6_months;\r",
							" pm.test(\"Check salary * 2\" ,function(){\r",
							"     pm.expect(resp_qa_salary_x2).to.eql(resp.person.u_name[1]*2);\r",
							"     });\r",
							"\r",
							"var resp_qa_salary_x2_9 = resp.qa_salary_after_12_months;\r",
							"pm.test(\"Check salary * 2.9\" ,function(){\r",
							"     pm.expect(resp_qa_salary_x2_9).to.eql(resp.person.u_name[1]*2.9);\r",
							"     });\r",
							"\r",
							"var resp_qa_salary_x4 = resp.person.u_salary_1_5_year;\r",
							"pm.test(\"Check salary * 4\" ,function(){\r",
							"     pm.expect(resp_qa_salary_x4).to.eql(resp.person.u_name[1]*4);\r",
							"     });\r",
							"\r",
							"\r",
							"//var resp_u_salary_1_5_year = resp.person.u_salary_1_5_year;\r",
							"// console.log (resp_u_salary_1_5_year)\r",
							"// pm.test(\"resp_u_salary_1_5_year= req_salary*4\", function () {\r",
							"// pm.expect(resp_u_salary_1_5_year).to.eql(req_salary*4);\r",
							"\r",
							"// var resp_qa_salary_after_12_months = resp.qa_salary_after_12_months;\r",
							"// console.log (resp_qa_salary_after_12_months)\r",
							"// pm.test(\"resp_qa_salary_after_12_months = req_salary*2.9\", function () {\r",
							"// pm.expect(resp_qa_salary_after_12_months).to.eql(req_salary*2.9)\r",
							"// });\r",
							"// var resp_qa_salary_after_6_months = resp.qa_salary_after_6_months;\r",
							"// console.log (resp_qa_salary_after_6_months)\r",
							"// mpt(\"resp_qa_salary_after_6_months= req_salary*2\", function () {\r",
							"// pm.expect(resp_qa_salary_after_6_months).to.eql(req_salary*2);\r",
							"// });\r",
							"// var resp_start_qa_salary = resp.start_qa_salary;\r",
							"// console.log (resp_start_qa_salary)\r",
							"// pm.test(\"resp_start_qa_salary= req_salary\", function () {\r",
							"// pm.expect(resp_start_qa_salary).to.eql(req_salary);\r",
							"// \t});\r",
							"\r",
							"//4) Достать значение из поля 'u_salary_1.5_year' и передать в поле salary запроса http://162.55.220.72:5005/get_test_user\r",
							"pm.environment.set(\"salary\",resp_qa_salary_x4)\r",
							"\r",
							"//var jsonData = JSON.parse(resp.person.u_salary_1_5_year)\r",
							"//postman.setEnvironmentVariable(\"salary2\", jsonData)"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"age\": 40,\r\n    \"salary\" : 10000,\r\n    \"name\" : \"Tatyana\",\r\n    \"auth_token\": \"{{token}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}/user_info",
					"host": [
						"{{url}}"
					],
					"path": [
						"user_info"
					]
				}
			},
			"response": []
		},
		{
			"name": "ER_3/new_data",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 3) http://162.55.220.72:5005/new_data\r",
							"// req.\r",
							"// POST\r",
							"// age: int\r",
							"// salary: int\r",
							"// name: str\r",
							"// auth_token\r",
							"\r",
							"// Resp.\r",
							"// {'name':name,\r",
							"//   'age': int(age),\r",
							"//   'salary': [salary, str(salary*2), str(salary*3)]}\r",
							"\r",
							"// Тесты:\r",
							"// 1) Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// 2) Проверка структуры json в ответе.\r",
							"var resp = pm.response.json();\r",
							"\r",
							"const schema ={\r",
							"   \"type\": \"object\",\r",
							"    \"default\": {},\r",
							"    \"title\": \"Root Schema\",\r",
							"    \"required\": [\r",
							"        \"age\",\r",
							"        \"name\",\r",
							"        \"salary\"\r",
							"    ],\r",
							"    \"properties\": {\r",
							"        \"age\": {\r",
							"            \"type\": \"integer\",\r",
							"            \"default\": 0,\r",
							"            \"title\": \"The age Schema\",\r",
							"            \"examples\": [\r",
							"                40\r",
							"            ]\r",
							"        },\r",
							"        \"name\": {\r",
							"            \"type\": \"string\",\r",
							"            \"default\": \"\",\r",
							"            \"title\": \"The name Schema\",\r",
							"            \"examples\": [\r",
							"                \"Tanya\"\r",
							"            ]\r",
							"        },\r",
							"        \"salary\": {\r",
							"            \"type\": \"array\",\r",
							"            \"default\": [],\r",
							"            \"title\": \"The salary Schema\",\r",
							"            \"items\": {\r",
							"                \"anyOf\": [{\r",
							"                    \"type\": \"integer\",\r",
							"                    \"default\": 0,\r",
							"                    \"title\": \"A Schema\",\r",
							"                    \"examples\": [\r",
							"                        10000\r",
							"                    ]\r",
							"                },\r",
							"                {\r",
							"                    \"type\": \"string\",\r",
							"                    \"title\": \"A Schema\",\r",
							"                    \"examples\": [\r",
							"                        \"20000\",\r",
							"                        \"30000\"\r",
							"                    ]\r",
							"                }]\r",
							"            },\r",
							"            \"examples\": [\r",
							"                [10000,\r",
							"                    \"20000\",\r",
							"                    \"30000\"\r",
							"                ]\r",
							"            ]\r",
							"        }\r",
							"    },\r",
							"    \"examples\": [{\r",
							"        \"age\": 40,\r",
							"        \"name\": \"Tanya\",\r",
							"        \"salary\": [\r",
							"            10000,\r",
							"            \"20000\",\r",
							"            \"30000\"\r",
							"        ]\r",
							"    }]\r",
							"};   \r",
							"pm.test(`Schema is valid`,function(){\r",
							"   pm.response.to.have.jsonSchema(schema); \r",
							"});\r",
							"\r",
							"// 3) В ответе указаны коэффициенты умножения salary, напишите тесты по проверке правильности результата перемножения на коэффициент.\r",
							"var resp_sal =resp.salary[0];\r",
							"var resp_sal_x2 = +resp.salary[1];\r",
							"var resp_sal_x3 = +resp.salary[2];\r",
							"\r",
							"pm.test(\"Check salary * 2\" ,function(){\r",
							"     pm.expect(resp_sal_x2).to.eql(resp.salary[0]*2);\r",
							"});\r",
							"pm.test(\"Check salary * 3\" ,function(){\r",
							"     pm.expect(resp_sal_x3).to.eql(resp.salary[0]*3);\r",
							"});\r",
							"\r",
							"// 4) проверить, что 2-й элемент массива salary больше 1-го и 0-го\r",
							"pm.test(\"salary 3 > salary 1 && salary 2\",function(){\r",
							"    pm.expect(resp_sal_x3).to.greaterThan(resp_sal)\r",
							"    pm.expect(resp_sal_x3).to.greaterThan(resp_sal_x2)\r",
							"});\r",
							"pm.test(\"salary 3> salary 1 && salary 2\",function(){\r",
							"    var salCheck = resp_sal_x3 > resp_sal && resp_sal_x3 > resp_sal\r",
							"    pm.expect(salCheck).to.be.true\r",
							"});\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "age",
							"value": "40",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "10000",
							"type": "text"
						},
						{
							"key": "name",
							"value": "Tanya",
							"type": "text"
						},
						{
							"key": "auth_token",
							"value": "{{token}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}/new_data",
					"host": [
						"{{url}}"
					],
					"path": [
						"new_data"
					]
				}
			},
			"response": []
		},
		{
			"name": "ER_4/test_pet_info",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//4) http://162.55.220.72:5005/test_pet_info\r",
							"// req.\r",
							"// POST\r",
							"// age: int\r",
							"// weight: int\r",
							"// name: str\r",
							"// auth_token\r",
							"\r",
							"\r",
							"// Resp.\r",
							"// {'name': name,\r",
							"//  'age': age,\r",
							"//  'daily_food':weight * 0.012,\r",
							"//  'daily_sleep': weight * 2.5}\r",
							"\r",
							"\r",
							"// Тесты:\r",
							"// 1) Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"// 2) Проверка структуры json в ответе.\r",
							"var resp = pm.response.json();\r",
							"\r",
							"const schema ={\r",
							"    \"type\": \"object\",\r",
							"    \"default\": {},\r",
							"    \"title\": \"Root Schema\",\r",
							"    \"required\": [\r",
							"        \"age\",\r",
							"        \"daily_food\",\r",
							"        \"daily_sleep\",\r",
							"        \"name\"\r",
							"    ],\r",
							"    \"properties\": {\r",
							"        \"age\": {\r",
							"            \"type\": \"integer\",\r",
							"            \"default\": 0,\r",
							"            \"title\": \"The age Schema\",\r",
							"            \"examples\": [\r",
							"                40\r",
							"            ]\r",
							"        },\r",
							"        \"daily_food\": {\r",
							"            \"type\": \"number\",\r",
							"            \"default\": 0.0,\r",
							"            \"title\": \"The daily_food Schema\",\r",
							"            \"examples\": [\r",
							"                1.008\r",
							"            ]\r",
							"        },\r",
							"        \"daily_sleep\": {\r",
							"            \"type\": \"number\",\r",
							"            \"default\": 0.0,\r",
							"            \"title\": \"The daily_sleep Schema\",\r",
							"            \"examples\": [\r",
							"                210.0\r",
							"            ]\r",
							"        },\r",
							"        \"name\": {\r",
							"            \"type\": \"string\",\r",
							"            \"default\": \"\",\r",
							"            \"title\": \"The name Schema\",\r",
							"            \"examples\": [\r",
							"                \"Tanya\"\r",
							"            ]\r",
							"        }\r",
							"    },\r",
							"    \"examples\": [{\r",
							"        \"age\": 40,\r",
							"        \"daily_food\": 1.008,\r",
							"        \"daily_sleep\": 210.0,\r",
							"        \"name\": \"Tanya\"\r",
							"    }]\r",
							"};\r",
							"pm.test(`Schema is valid`,function(){\r",
							"   pm.response.to.have.jsonSchema(schema); \r",
							"});\r",
							"\r",
							"// 3) В ответе указаны коэффициенты умножения weight, напишите тесты по проверке правильности результата перемножения на коэффициент.\r",
							"var resp_daily_food = resp.daily_food;\r",
							"var resp_daily_sleep = resp.daily_sleep;\r",
							"\r",
							"var req = request.data\r",
							"var req_weight = +req.weight;\r",
							"\r",
							"pm.test(\"Check waight for daily food\", function () {\r",
							"    pm.expect(resp_daily_food).to.eql(req_weight * 0.012);\r",
							"});\r",
							"pm.test(\"Check waight for daily sleep\", function () {\r",
							"    pm.expect(resp_daily_sleep).to.eql(req_weight * 2.5);\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "age",
							"value": "40",
							"type": "text"
						},
						{
							"key": "weight",
							"value": "84",
							"type": "text"
						},
						{
							"key": "name",
							"value": "Tanya",
							"type": "text"
						},
						{
							"key": "auth_token",
							"value": "{{token}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}/test_pet_info",
					"host": [
						"{{url}}"
					],
					"path": [
						"test_pet_info"
					]
				}
			},
			"response": []
		},
		{
			"name": "ER_5/get_test_user",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 5) http://162.55.220.72:5005/get_test_user\r",
							"// req.\r",
							"// POST\r",
							"// age: int\r",
							"// salary: int\r",
							"// name: str\r",
							"// auth_token\r",
							"\r",
							"// Resp.\r",
							"// {'name': name,\r",
							"//  'age':age,\r",
							"//  'salary': salary,\r",
							"//  'family':{'children':[['Alex', 24],['Kate', 12]],\r",
							"//  'u_salary_1.5_year': salary * 4}\r",
							"//   }\r",
							"\r",
							"// Тесты:\r",
							"// 1) Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"// 2) Проверка структуры json в ответе.\r",
							"var resp = pm.response.json();\r",
							"\r",
							"const schema ={\r",
							"    \"type\": \"object\",\r",
							"    \"default\": {},\r",
							"    \"title\": \"Root Schema\",\r",
							"    \"required\": [\r",
							"        \"age\",\r",
							"        \"family\",\r",
							"        \"name\",\r",
							"        \"salary\"\r",
							"    ],\r",
							"    \"properties\": {\r",
							"        \"age\": {\r",
							"            \"type\": \"string\",\r",
							"            \"default\": \"\",\r",
							"            \"title\": \"The age Schema\",\r",
							"            \"examples\": [\r",
							"                \"40\"\r",
							"            ]\r",
							"        },\r",
							"        \"family\": {\r",
							"            \"type\": \"object\",\r",
							"            \"default\": {},\r",
							"            \"title\": \"The family Schema\",\r",
							"            \"required\": [\r",
							"                \"children\",\r",
							"                \"u_salary_1_5_year\"\r",
							"            ],\r",
							"            \"properties\": {\r",
							"                \"children\": {\r",
							"                    \"type\": \"array\",\r",
							"                    \"default\": [],\r",
							"                    \"title\": \"The children Schema\",\r",
							"                    \"items\": {\r",
							"                        \"type\": \"array\",\r",
							"                        \"title\": \"A Schema\",\r",
							"                        \"items\": {\r",
							"                            \"anyOf\": [{\r",
							"                                \"type\": \"string\",\r",
							"                                \"title\": \"A Schema\",\r",
							"                                \"examples\": [\r",
							"                                    \"Alex\",\r",
							"                                    \"Kate\"\r",
							"                                ]\r",
							"                            },\r",
							"                            {\r",
							"                                \"type\": \"integer\",\r",
							"                                \"title\": \"A Schema\",\r",
							"                                \"examples\": [\r",
							"                                    24,\r",
							"                                    12\r",
							"                                ]\r",
							"                            }]\r",
							"                        },\r",
							"                        \"examples\": [\r",
							"                            [\"Alex\",\r",
							"                                24\r",
							"                            ],\r",
							"                            [\"Kate\",\r",
							"                                12\r",
							"                            ]\r",
							"                        ]\r",
							"                    },\r",
							"                    \"examples\": [\r",
							"                        [\r",
							"                            [\"Alex\",\r",
							"                                24\r",
							"                            ],\r",
							"                            [\"Kate\",\r",
							"                                12\r",
							"                            ]\r",
							"                        ]\r",
							"                    ]\r",
							"                },\r",
							"                \"u_salary_1_5_year\": {\r",
							"                    \"type\": \"integer\",\r",
							"                    \"default\": 0,\r",
							"                    \"title\": \"The u_salary_1_5_year Schema\",\r",
							"                    \"examples\": [\r",
							"                        40000\r",
							"                    ]\r",
							"                }\r",
							"            },\r",
							"            \"examples\": [{\r",
							"                \"children\": [\r",
							"                    [\"Alex\",\r",
							"                        24\r",
							"                    ],\r",
							"                    [\"Kate\",\r",
							"                        12\r",
							"                    ]\r",
							"                ],\r",
							"                \"u_salary_1_5_year\": 40000\r",
							"            }]\r",
							"        },\r",
							"        \"name\": {\r",
							"            \"type\": \"string\",\r",
							"            \"default\": \"\",\r",
							"            \"title\": \"The name Schema\",\r",
							"            \"examples\": [\r",
							"                \"Tanya\"\r",
							"            ]\r",
							"        },\r",
							"        \"salary\": {\r",
							"            \"type\": \"integer\",\r",
							"            \"default\": 0,\r",
							"            \"title\": \"The salary Schema\",\r",
							"            \"examples\": [\r",
							"                10000\r",
							"            ]\r",
							"        }\r",
							"    },\r",
							"    \"examples\": [{\r",
							"        \"age\": \"40\",\r",
							"        \"family\": {\r",
							"            \"children\": [\r",
							"                [\"Alex\",\r",
							"                    24\r",
							"                ],\r",
							"                [\"Kate\",\r",
							"                    12\r",
							"                ]\r",
							"            ],\r",
							"            \"u_salary_1_5_year\": 40000\r",
							"        },\r",
							"        \"name\": \"Tanya\",\r",
							"        \"salary\": 10000\r",
							"    }]\r",
							"};\r",
							"pm.test(`Schema is valid`,function(){\r",
							"   pm.response.to.have.jsonSchema(schema); \r",
							"}); \r",
							"// 3) Проверить что знaчение поля name = значению переменной name из окружения\r",
							"var resp_name = resp.name;\r",
							"var resp_age = resp.age;\r",
							"\r",
							"pm.test(\"Name = Env name\",function(){\r",
							"    pm.expect(pm.environment.get(\"name\")).to.equal(resp_name);\r",
							"});\r",
							"\r",
							"//pm.environment.get(\"variable_key\");\r",
							"// 4) Проверить что занчение поля age в ответе соответсвует отправленному в запросе значению поля age\r",
							" var req = request.data;\r",
							" var req_age = req.age;\r",
							"\r",
							" pm.test(\"resp age = req age\",function() {\r",
							"     pm.expect(req_age).to.eql(resp_age);\r",
							" });\r",
							" resp_age=resp.age\r",
							" req_age=req.age\r",
							" pm.test(\"resp age = req age\", function () {\r",
							" pm.expect(resp_age).to.eql(req_age);\r",
							" });\r",
							"\r",
							"console.log (resp.name)\r",
							"console.log (environment.name)\r",
							"\t\t\t\t\t\t\t\t\t\t\t\t"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "age",
							"value": "{{age}}",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "{{salary}}",
							"type": "text"
						},
						{
							"key": "name",
							"value": "{{name}}",
							"type": "text"
						},
						{
							"key": "auth_token",
							"value": "{{token}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}/get_test_user",
					"host": [
						"{{url}}"
					],
					"path": [
						"get_test_user"
					]
				}
			},
			"response": []
		},
		{
			"name": "ER_6/currency",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 6) http://162.55.220.72:5005/currency\r",
							"// req.\r",
							"// POST\r",
							"// auth_token\r",
							"\r",
							"// Resp. Передаётся список массив объектов.\r",
							"// [\r",
							"// {\"Cur_Abbreviation\": str,\r",
							"//  \"Cur_ID\": int,\r",
							"//  \"Cur_Name\": str\r",
							"// }\r",
							"// …\r",
							"// {\"Cur_Abbreviation\": str,\r",
							"//  \"Cur_ID\": int,\r",
							"//  \"Cur_Name\": str\r",
							"// }\r",
							"// ]\r",
							"\r",
							"// Тесты:\r",
							"// 1) Можете взять любой объект из присланного списка, используйте js random.\r",
							"// В объекте возьмите Cur_ID и передать через окружение в следующий запрос.\r",
							"\r",
							"var resp = pm.response.json();\r",
							"//var object = resp[_.random(resp.length)]\r",
							"var randomObj = resp[Math.floor(Math.random() * resp.length-1)];//(JS)метод разондомить число\r",
							"console.log(randomObj)\r",
							"\r",
							"pm.environment.set(\"Cur_ID\", randomObj.Cur_ID);\r",
							"\r",
							"//pm.environment.set(\"Cur_ID\", object.Cur_ID);\r",
							"//console.log(object)\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "age",
							"value": "40",
							"type": "text",
							"disabled": true
						},
						{
							"key": "salary",
							"value": "10000",
							"type": "text",
							"disabled": true
						},
						{
							"key": "name",
							"value": "Tatyana",
							"type": "text",
							"disabled": true
						},
						{
							"key": "auth_token",
							"value": "{{token1}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://54.157.99.22:80/currency",
					"protocol": "http",
					"host": [
						"54",
						"157",
						"99",
						"22"
					],
					"port": "80",
					"path": [
						"currency"
					]
				}
			},
			"response": []
		},
		{
			"name": "ER_7/curr_byn",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// http://162.55.220.72:5005/(/54.157.99.22:80)curr_byn\r",
							"// req.\r",
							"// POST\r",
							"// auth_token\r",
							"// curr_code: int\r",
							"\r",
							"// Resp.\r",
							"// {\r",
							"//     \"Cur_Abbreviation\": str\r",
							"//     \"Cur_ID\": int,\r",
							"//     \"Cur_Name\": str,\r",
							"//     \"Cur_OfficialRate\": float,\r",
							"//     \"Cur_Scale\": int,\r",
							"//     \"Date\": str\r",
							"// }\r",
							"\r",
							"// Тесты:\r",
							"// 1) Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// 2) Проверка структуры json в ответе.\r",
							"const schema ={\r",
							"     \"type\": \"object\",\r",
							"    \"default\": {},\r",
							"    \"title\": \"Root Schema\",\r",
							"    \"required\": [\r",
							"        \"Cur_Abbreviation\",\r",
							"        \"Cur_ID\",\r",
							"        \"Cur_Name\",\r",
							"        \"Cur_OfficialRate\",\r",
							"        \"Cur_Scale\",\r",
							"        \"Date\"\r",
							"    ],\r",
							"    \"properties\": {\r",
							"        \"Cur_Abbreviation\": {\r",
							"            \"type\": \"string\",\r",
							"            \"default\": \"\",\r",
							"            \"title\": \"The Cur_Abbreviation Schema\",\r",
							"            \"examples\": [\r",
							"                \"CAD\"\r",
							"            ]\r",
							"        },\r",
							"        \"Cur_ID\": {\r",
							"            \"type\": \"integer\",\r",
							"            \"default\": 0,\r",
							"            \"title\": \"The Cur_ID Schema\",\r",
							"            \"examples\": [\r",
							"                1\r",
							"            ]\r",
							"        },\r",
							"        \"Cur_Name\": {\r",
							"            \"type\": \"string\",\r",
							"            \"default\": \"\",\r",
							"            \"title\": \"The Cur_Name Schema\",\r",
							"            \"examples\": [\r",
							"                \"Canadian dollars\"\r",
							"            ]\r",
							"        },\r",
							"        \"Cur_OfficialRate\": {\r",
							"            \"type\": \"number\",\r",
							"            \"default\": 0.0,\r",
							"            \"title\": \"The Cur_OfficialRate Schema\",\r",
							"            \"examples\": [\r",
							"                3.341425439079408\r",
							"            ]\r",
							"        },\r",
							"        \"Cur_Scale\": {\r",
							"            \"type\": \"integer\",\r",
							"            \"default\": 0,\r",
							"            \"title\": \"The Cur_Scale Schema\",\r",
							"            \"examples\": [\r",
							"                31\r",
							"            ]\r",
							"        },\r",
							"        \"Date\": {\r",
							"            \"type\": \"string\",\r",
							"            \"default\": \"\",\r",
							"            \"title\": \"The Date Schema\",\r",
							"            \"examples\": [\r",
							"                \"2023-04-19\"\r",
							"            ]\r",
							"        }\r",
							"    },\r",
							"    \"examples\": [{\r",
							"        \"Cur_Abbreviation\": \"CAD\",\r",
							"        \"Cur_ID\": 1,\r",
							"        \"Cur_Name\": \"Canadian dollars\",\r",
							"        \"Cur_OfficialRate\": 3.341425439079408,\r",
							"        \"Cur_Scale\": 31,\r",
							"        \"Date\": \"2023-04-19\"\r",
							"    }]\r",
							"};\r",
							"pm.test(`Schema is valid`,function(){\r",
							"   pm.response.to.have.jsonSchema(schema); \r",
							"\r",
							"});\r",
							"\r",
							"// ===============\r",
							"// ***\r",
							"// 1) получить список валют\r",
							"// 2) итерировать список валют\r",
							"// 3) в каждой итерации отправлять запрос на сервер для получения курса каждой валюты\r",
							"// 4) если возвращается 500 код, переходим к следующей итреации\r",
							"// 5) если получаем 200 код, проверяем response json на наличие поля \"Cur_OfficialRate\"\r",
							"// 6) если поле есть, пишем в консоль инфу про фалюту в виде response\r",
							"// {\r",
							"//     \"Cur_Abbreviation\": str\r",
							"//     \"Cur_ID\": int,\r",
							"//     \"Cur_Name\": str,\r",
							"//     \"Cur_OfficialRate\": float,\r",
							"//     \"Cur_Scale\": int,\r",
							"//     \"Date\": str\r",
							"// }\r",
							"// 7) переходим к следующей итерации\r",
							"\r",
							"let respData = pm.response.json();//парсим\r",
							"     // object = respData[Math.floor(Math.random() * respData.lenght -1)];//рандомим\r",
							"     //consol.log(object)\r",
							"     //pm.environment.set(\"Cur_ID\" , Object(Cur_ID);\r",
							"let token = pm.environment.get('token');\r",
							"     // for (currency of respData){\r",
							"let cur_id = pm.environment.get(\"Cur_ID\"); \r",
							"   \r",
							"for(let i = 0; i < respData.length; i++) {\r",
							"    cur_id = respData[i].Cur_ID;\r",
							"\r",
							"    const sendRequest = {      \r",
							"        url: 'http://54.157.99.22:80/curr_byn',\r",
							"        method:'POST',\r",
							"        header: {\r",
							"          'Content-Type': 'application/json',\r",
							"    },\r",
							"        body: {\r",
							"           mode: 'urlencoded',\r",
							"           urlencoded:[\r",
							"             { key: 'auth_token', value: token},\r",
							"            {key:'curr_code' , value: cur_id}\r",
							"       ]\r",
							"   }\r",
							"};\r",
							" //  }pm.sendRequest({\r",
							"        //   url: 'http://54.157.99.22:80/curr_byn' ,\r",
							"        //   method: 'Post',\r",
							"        //   header: {\r",
							"        //   'Content -Type' : 'application/json',\r",
							"        //   },\r",
							"        // body:{\r",
							"        //   mode: 'urlencoded',\r",
							"        //   urlencoded: [{ key: 'auth_token',value: token},\r",
							"        //   {key: 'curr_code',value: cur_id}] \r",
							"        //   }\r",
							"    \r",
							"pm.sendRequest(sendRequest,(err, response) =>{\r",
							"      if (response.code === 200){\r",
							"            let resp_data = response.json();\r",
							"            if (pm.expect(resp_data).to.have.property(\"Cur_OfficialRate\")){\r",
							"                console.log(resp_data);\r",
							"          }\r",
							"        }\r",
							"     });\r",
							" }\r",
							"\r",
							"\r",
							"//          resp_data = response.json();\r",
							"//           if( response .code === 500){\r",
							"//            console.log('error' )\r",
							"//        } else if (response.code ===200) {\r",
							"//            if (Object.hasOwn(resp_data, 'Cur_OfficialRate')) {//to have property\r",
							"//                console.log(req_data);\r",
							"//            }\r",
							"//        }\r",
							"//    });\r",
							"// }\r",
							"console.log(respData);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "urlencoded",
					"urlencoded": [
						{
							"key": "auth_token",
							"value": "{{token1}}",
							"type": "text"
						},
						{
							"key": "curr_code",
							"value": "1",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://54.157.99.22:80/curr_byn",
					"protocol": "http",
					"host": [
						"54",
						"157",
						"99",
						"22"
					],
					"port": "80",
					"path": [
						"curr_byn"
					]
				}
			},
			"response": []
		}
	]
}