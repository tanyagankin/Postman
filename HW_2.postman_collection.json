{
	"info": {
		"_postman_id": "9de1640d-0f7f-4fdc-b5c2-010f24087d51",
		"name": "HW_2",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "26682973"
	},
	"item": [
		{
			"name": "EP_1/first",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"pm.test(\"Body matches string\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"This is the first responce from server!ss\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}/first",
					"host": [
						"{{url}}"
					],
					"path": [
						"first"
					]
				}
			},
			"response": []
		},
		{
			"name": "EP_2/user_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//2. Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"//3.Спарсить response body в json.\r",
							"var resp_data = pm.response.json();\r",
							"\r",
							"//4. Проверить, что name в ответе равно name s request (name вбить руками.)\r",
							"pm.test(\"The name in the response is equal to the name in the request\", function () {\r",
							"    pm.expect(resp_data.name).to.eql('Tanya');\r",
							"});\r",
							"//5.Проверить, что age в ответе равно age s request (age вбить руками.)\r",
							"pm.test(\"The age in the response is equal to the age in the request\", function () {\r",
							"    pm.expect(resp_data.age).to.eql('40');\r",
							"});\r",
							"\r",
							"//6.Проверить, что salary в ответе равно salary s request (salary вбить руками.)\r",
							"pm.test(\"The salary in the response is equal to the salary in the request\", function () {\r",
							"    pm.expect(resp_data.salary).to.eql(+'5000');\r",
							"});\r",
							"\r",
							"//7.Спарсить request.\r",
							"var req_data = request.data;\r",
							"\r",
							"//8. Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"pm.test(\"The name in the response is equal to the name in the request (via variable)\", function () {\r",
							"    pm.expect(req_data.name).to.eql(resp_data.name);\r",
							"});\r",
							"//9. Проверить, что age в ответе равно age s request (age забрать из request.)\r",
							"pm.test(\"The age in the response is equal to the age in the request (via variable)\", function () {\r",
							"    pm.expect(resp_data.age).to.eql(resp_data.age);\r",
							"});\r",
							"//10. Проверить, что salary в ответе равно salary s request (salary забрать из request.)\r",
							"pm.test(\"The salary in the response is equal to the salary in the request (via variable)\", function () {\r",
							"    pm.expect(+resp_data.salary).to.eql(resp_data.salary);\r",
							"});\r",
							"//11. Вывести в консоль параметр family из response.\r",
							"console.log(\"family = \",resp_data.family)\r",
							"\r",
							"//12. Проверить что u_salary_1_5_year в ответе равно salary*4 (salary забрать из request)\r",
							"//console.log(resp_data.family.u_salary_1_5_year)\r",
							"pm.test(\"u_salary_1_5_year in the response is equal to the salary*4 in the request (via variable)\", function () {\r",
							"    pm.expect((+resp_data.salary)*4).to.eql(resp_data.family.u_salary_1_5_year);\r",
							"});\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "Tanya",
							"type": "text"
						},
						{
							"key": "age",
							"value": "40",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "5000",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}/user_info_3",
					"host": [
						"{{url}}"
					],
					"path": [
						"user_info_3"
					]
				}
			},
			"response": []
		},
		{
			"name": "EP_3/object_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//2. Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"//3.Спарсить response body в json.\r",
							"var resp = pm.response.json();\r",
							"\r",
							"var resp_name = resp.name;\r",
							"var resp_age = resp.age;\r",
							"var resp_salary = resp.salary;\r",
							"\r",
							"//4. Спарсить request.\r",
							"var req_url = pm.request.url.query.toObject();\r",
							"\r",
							"console.log(req_url);\r",
							"var req_name = req_url.name;\r",
							"var req_age = req_url.age;\r",
							"var req_salary = req_url.salary;\r",
							"var dogname = resp.family.pets.dog;\r",
							"\r",
							"//5. Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"pm.test(\"Responce name = request name\", function () {\r",
							"    pm.expect(req_name).to.eql(resp_name);\r",
							"});\r",
							"\r",
							"//6. Проверить, что age в ответе равно age s request (age забрать из request.)\r",
							"pm.test(\"Responce age = request age\", function () {\r",
							"    pm.expect(+req_age).to.eql(+resp_age);\r",
							"});\r",
							"\r",
							"//7. Проверить, что salary в ответе равно salary s request (salary забрать из request.)\r",
							"pm.test(\"Responce salary = request salary\", function () {\r",
							"    pm.expect(+req_salary).to.eql(+resp_salary);\r",
							"});\r",
							"\r",
							"//8. Вывести в консоль параметр family из response.\r",
							"console.log(\"family\",resp.family);\r",
							"\r",
							"//9. Проверить, что у параметра dog есть параметры name.\r",
							"pm.test(\"Have property name\", function () {\r",
							"   // pm.expect(dogname).to.have.property(\"name\");\r",
							"  pm.expect(resp.family.pets.dog).to.have.property(\"name\");  \r",
							"});\r",
							"\r",
							"//10. Проверить, что у параметра dog есть параметры age.\r",
							"pm.test(\"Have property age\", function () {\r",
							"    pm.expect(dogname).to.have.property(\"age\");\r",
							"});\r",
							"\r",
							"//11. Проверить, что параметр name имеет значение Luky\r",
							"pm.test(\"The Dog's name is Luky\", function () {\r",
							"    pm.expect(resp.family.pets.dog.name).to.eql(\"Luky\");\r",
							"});\r",
							"\r",
							"//12. Проверить, что параметр age имеет значение 4.\r",
							"pm.test(\"Dog age is 4\", function () {\r",
							"    pm.expect(dogname).to.have.property(\"age\", 4);\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}/object_info_3?name=Tanya&age=40&salary=10000",
					"host": [
						"{{url}}"
					],
					"path": [
						"object_info_3"
					],
					"query": [
						{
							"key": "name",
							"value": "Tanya"
						},
						{
							"key": "age",
							"value": "40"
						},
						{
							"key": "salary",
							"value": "10000"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "EP_4/object_info_4",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//2. Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"//3.Спарсить response body в json.\r",
							"var resp = pm.response.json();\r",
							"\r",
							"var resp_name = resp.name;\r",
							"var resp_age = resp.age;\r",
							"var resp_salary = resp.salary\r",
							"\r",
							"//4. Спарсить request.\r",
							"var req_url = pm.request.url.query.toObject();\r",
							"var req_name = req_url.name;\r",
							"var req_age = +req_url.age;\r",
							"var req_salary = req_url.salary;\r",
							"var req_salary = req_url.salary\r",
							"\r",
							"//5. Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"pm.test(\"Responce name = request name\", function () {\r",
							"    pm.expect(resp_name).to.eql(req_name);\r",
							"});\r",
							"\r",
							"//6. Проверить, что age в ответе равно age s request (age забрать из request.)\r",
							"pm.test(\"Responce age = request age\", function () {\r",
							"    pm.expect(resp_age).to.eql(+req_age);\r",
							"});\r",
							"\r",
							"//7. Вывести в консоль параметр salary из request.\r",
							"console.log(\"Request salary\",req_salary);\r",
							"\r",
							"// 8. Вывести в консоль параметр salary из response.\r",
							"console.log(\"Responce salary\", resp_salary);\r",
							"\r",
							"//9. Вывести в консоль 0-й элемент параметра salary из response.\r",
							"console.log(\"Responce salary\", resp_salary[0]);\r",
							"\r",
							"//10. Вывести в консоль 1-й элемент параметра salary параметр salary из response.\r",
							"console.log(\"Responce salary\", resp_salary[1]);\r",
							"\r",
							"//11. Вывести в консоль 2-й элемент параметра salary параметр salary из response.\r",
							"console.log(\"Responce salary\", resp_salary[2] );\r",
							"\r",
							"//12. Проверить, что 0-й элемент параметра salary равен salary из request (salary забрать из request.)\r",
							"pm.test(\"Responce salary = request salary\", function () {\r",
							"    pm.expect(+resp_salary[0]).to.eql(+req_salary);\r",
							"});\r",
							"//13. Проверить, что 1-й элемент параметра salary равен salary*2 из request (salary забрать из request.)\r",
							"pm.test(\"Responce salary = request salary\", function () {\r",
							"    pm.expect(+resp_salary[1]).to.eql(+req_salary*2);\r",
							"});    \r",
							"//14. Проверить, что 2-й элемент параметра salary равен salary*3 из request (salary забрать из request.)\r",
							"pm.test(\"Responce salary = request salary\", function () {\r",
							"    pm.expect(+resp_salary[2]).to.eql(+req_salary*3);\r",
							"});\r",
							"//15. Создать в окружении переменную name\r",
							"pm.environment.set(\"name\");\r",
							"\r",
							"//16. Создать в окружении переменную age\r",
							"pm.environment.set(\"age\");\r",
							"//17. Создать в окружении переменную salary\r",
							"pm.environment.set(\"salary\");\r",
							"//18. Передать в окружение переменную name\r",
							"pm.environment.set(\"name\", req_name);\r",
							"//19. Передать в окружение переменную age\r",
							"pm.environment.set(\"age\", req_age);\r",
							"//20. Передать в окружение переменную salary\r",
							"pm.environment.set(\"salary\", req_salary);\r",
							"//21. Написать цикл который выведет в консоль по порядку элементы списка из параметра salary.\r",
							"//for(let i = 0; i <resp_salary.length; i++) {\r",
							"// console.log(i);\r",
							"//}\r",
							"console.log(resp_salary.lenght);\r",
							"\r",
							"for (i in resp_salary) {\r",
							"    console.log(\"Key \"+ i,\"value \" +resp_salary[i]);\r",
							"//for(i of resp_salary){\r",
							"  //console.log(i);\r",
							"//}    \r",
							"};\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}/object_info_4?name=Tatyana&age=40&salary=10000",
					"host": [
						"{{url}}"
					],
					"path": [
						"object_info_4"
					],
					"query": [
						{
							"key": "name",
							"value": "Tatyana"
						},
						{
							"key": "age",
							"value": "40"
						},
						{
							"key": "salary",
							"value": "10000"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "EP_5/user_info_2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//1. Вставить параметр salary из окружения в request\r",
							"//2. Вставить параметр age из окружения в age\r",
							"//3. Вставить параметр name из окружения в name\r",
							"//4. Отправить запрос.\r",
							"//5. Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"//6. Спарсить response body в json.\r",
							"var resp = pm.response.json();\r",
							"\r",
							" //let resp_salary_after_1_5_year = resp[\"qa_salary_after_1.5_year\"];\r",
							" //let resp_salary_after_12_months = resp.qa_salary_after_12_months;\r",
							" let resp_salary_after_3_5_years = resp[\"qa_salary_after_3.5_years\"];\r",
							"// let resp_salary_after_6_months = resp.qa_salary_after_6_months;\r",
							"// let resp_start_qa_salary = resp_start_qa_salary;\r",
							"// console.log(typeof(respArrName));\r",
							"\r",
							"//7. Спарсить request.\r",
							" let req = request.data;\r",
							" let req_salary = req.salary;\r",
							" let req_age = req.age;\r",
							"\r",
							"//8. Проверить, что json response имеет параметр start_qa_salary\r",
							" pm.test(\"Response have start_qa_salary\", function () {\r",
							"     pm.expect(resp).to.have.property(\"start_qa_salary\");\r",
							"});\r",
							"//9. Проверить, что json response имеет параметр qa_salary_after_6_months\r",
							" pm.test(\"Response have qa_salary_after_6_months\", function () {\r",
							"    pm.expect(resp).to.have.property(\"qa_salary_after_6_months\");\r",
							"});\r",
							"//10. Проверить, что json response имеет параметр qa_salary_after_12_months\r",
							" pm.test(\"Response have qa_salary_after_12_months\", function () {\r",
							"    pm.expect(resp).to.have.property(\"qa_salary_after_12_months\");\r",
							" });\r",
							"//11. Проверить, что json response имеет параметр qa_salary_after_1.5_year\r",
							" pm.test(\"Response have qa_salary_after_1.5_year\", function () {\r",
							"     pm.expect(resp).to.have.property(\"qa_salary_after_1.5_year\");\r",
							" });\r",
							"//12. Проверить, что json response имеет параметр qa_salary_after_3.5_years\r",
							" pm.test(\"Response have qa_salary_after_3.5_years\", function () {\r",
							"     pm.expect(resp).to.have.property(\"qa_salary_after_3.5_years\");\r",
							" });\r",
							"//13. Проверить, что json response имеет параметр person\r",
							" pm.test(\"Response have person\", function () {\r",
							"     pm.expect(resp).to.have.property(\"person\");\r",
							" });\r",
							"//14. Проверить, что параметр start_qa_salary равен salary из request (salary забрать из request.)\r",
							" pm.test(\"start_qa_salary = request salary\", function () {\r",
							"     pm.expect(resp.start_qa_salary).to.eql(+req.salary);\r",
							" });\r",
							"\r",
							"//15. Проверить, что параметр qa_salary_after_6_months равен salary*2 из request (salary забрать из request.)\r",
							" pm.test(\"qa_salary_after_6_months = request salary*2\", function () {\r",
							"     pm.expect(resp.qa_salary_after_6_months).to.eql(+req.salary*2);\r",
							" });\r",
							"//16. Проверить, что параметр qa_salary_after_12_months равен salary*2.7 из request (salary забрать из request.)\r",
							" pm.test(\"qa_salary_after_12_months = request salary*2.7\", function () {\r",
							"    pm.expect(resp.qa_salary_after_12_months).to.eql(+req.salary* 2.7);\r",
							" });\r",
							"//17. Проверить, что параметр qa_salary_after_1.5_year равен salary*3.3 из request (salary забрать из request.)\r",
							"var resp_salary_after_1_5_year = resp[\"qa_salary_after_1.5_year\"]\r",
							" pm.test(\"resp_salary_after_1.5_year= request salary* 3.3\", function () {\r",
							"     pm.expect(resp_salary_after_1_5_year).to.eql(+req_salary* 3.3);\r",
							" });\r",
							"//18. Проверить, что параметр qa_salary_after_3.5_years равен salary*3.8 из request (salary забрать из request.)\r",
							" pm.test(\"resp_salary_after_3.5_years= request salary* 3.8\", function () {\r",
							"     pm.expect(resp_salary_after_3_5_years).to.eql(+req_salary* 3.8);\r",
							" });\r",
							"//19. Проверить, что в параметре person, 1-й элемент из u_name равен salary из request (salary забрать из request.)\r",
							" pm.test(\"person.u_name[1]= request salary\", function () {\r",
							"         pm.expect(resp.person.u_name[1]).to.eql(+req.salary);\r",
							" });\r",
							" // 20. Проверить, что параметр u_age равен age из request (age забрать из request.)\r",
							" pm.test(\"person.u_age= request age\", function () {\r",
							"        pm.expect(resp.person.u_age).to.eql(+req.age);\r",
							" });\r",
							"// 21. Проверить, что параметр u_salary_5_years равен salary*4.2 из request (salary забрать из request.)\r",
							" pm.test(\"resp_salary_5_years= request salary* 4.2\", function () {\r",
							"     pm.expect(resp.person.u_salary_5_years).to.eql(+req.salary* 4.2);\r",
							" });\r",
							"// 22. ***Написать цикл который выведет в консоль по порядку элементы списка из параметра person.\r",
							"\r",
							"for (i in  resp.person) {\r",
							"     if (Array.isArray(resp.person[i])){\r",
							"         resp.person[i].forEach(val => console.log(val));\r",
							"     }else {\r",
							"         console.log(`${i}:${resp.person [i]}`);//(`) нужны ковычки слева на клавиатуре где буква Ё!\r",
							"     }\r",
							" }\r",
							"// for (const [key,value] of Object.entries(resp_person)){\r",
							"//         console.log('${key}: ${value}')\r",
							"// }\r",
							"//console.log ('person. '+i, '=', rest.person[i])\r",
							"//;\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "{{name}}",
							"type": "text"
						},
						{
							"key": "age",
							"value": "{{age}}",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "{{salary}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}/user_info_2",
					"host": [
						"{{url}}"
					],
					"path": [
						"user_info_2"
					],
					"query": [
						{
							"key": "",
							"value": "",
							"disabled": true
						},
						{
							"key": "",
							"value": "",
							"disabled": true
						},
						{
							"key": "",
							"value": "",
							"disabled": true
						}
					]
				}
			},
			"response": []
		}
	]
}